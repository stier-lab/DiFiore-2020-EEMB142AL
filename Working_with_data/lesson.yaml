- Class: EEMB 142AL
  Course: R Programming
  Lesson: Working_with_data
  Author: Bart DiFiore; based on code by Simon A. Queenborough and Nick Carchedi
  Type: Standard
  Organization: UCSB EEMB
  Version: 2.2.0

- Class: text
  Output: In this lesson we'll review some of the basics of how to work with data in R.
  
- Class: text
  Output: 'In EEMB 142AL, you will typically encounter two main data formats in R:  vectors and data.frames. If you imagine a typical excel sheet, a vector would be one column in that sheet, while a dataframe would be the entire sheet.'

- Class: text
  Output: 'In other words, vectors are a single string of data, while dataframes are rectangular collections of vectors.'
    
- Class: cmd_question
  Output: The simplest way to create a vector in R is by using the `:`
    operator. Type 1:20 to see how it works.
  CorrectAnswer: '1:20'
  AnswerTests: omnitest(correctExpr='1:20')
  Hint: Type 1:20 with no spaces. Make sure to use a regular colon and NOT a semi-colon.
  
- Class: cmd_question
  Output: And, that we can assign this vector to a variable, e.g., 'x'? Try that! Assign 1:20 to the variable 'x'.
  CorrectAnswer: x <- 1:20
  AnswerTests: omnitest(correctExpr='x <- 1:20')
  Hint: Remember that the 'carrot' or 'arrow' (<-) is used to assign things to object names.
  
- Class: text
  Output: There are a number of ways that we can examine our new vector.
  
- Class: cmd_question
  Output: "We could just display the vector on the screen, by typing the name: 'x'. Try that."
  CorrectAnswer: x
  AnswerTests: omnitest(correctExpr='x')
  Hint: Hmmmm... type 'x'!
  
- Class: cmd_question
  Output: But, what if we had a really, really, really long vector that was much too large to display on the screen? Lets see what happens. Type 1:10^6 and hit enter
  CorrectAnswer: 1:10^6
  AnswerTests: omnitest(correctExpr='1:10^6')
  Hint: type 1:10^6
  
- Class: cmd_question
  Output: What happened? Well R truncated the display in the console rather than displaying all of the integer values from 1 to 1 million. There are more efficient ways of looking at the data. We can easily examine 'x' with the str(), or structure, function. Type str(x).
  CorrectAnswer: str(x)
  AnswerTests: omnitest(correctExpr='str(x)')
  Hint: str(x)
    
- Class: text
  Output: This function displays a summary of the various parts of the object. In this case, we only have one part, the vector of integers. However, the str() function is very powerful and worth commiting to memory. It can provide you with lots of info when you start working with more complex datasets.
    
- Class: text
  Output: OK, vectors of integers are straightforward. Hopefully you understand these now, and can make and examine them. 
    
- Class: text
  Output: The ':' function is really only good for making vectors of consecutive integers. But what if you wanted a vector of the odd numbers from 3 to 11?
  
- Class: cmd_question
  Output: 'The function seq() will allow you to build custom vectors. Just a reminder, if you have questions about a particular R function, you can access its documentation with a question mark followed by the function name: ?function_name_here. Type ?seq and review the help file.'
  CorrectAnswer: ?seq
  AnswerTests: omnitest(correctExpr='?seq')
  Hint: type ?seq to access the help file
  
- Class: cmd_question
  Output: Lets practice with the sequence function. Build a vector of the odd numbers from 3 to 11. 
  CorrectAnswer: seq(from = 3, to = 11, by = 2)
  AnswerTests: omnitest(correctExpr='seq(from = 3, to = 11, by = 2)')
  Hint: Type seq(from = 3, to = 11, by = 2). Typing seq(3,11,2) will also work but for the purposes of this excercise please include the argument names.
  
- Class: text
  Output: 'Ok lets move on. What if we wanted to make a vector that was composed of text? For instance, in ecological research we often have data organized by sites names. R interpets text in two different manners: character and factor. Data encoded as characters are simply text strings, while factor data are actually organied categories with underlying numeric encoding. Well get into factors later in the course.'

- Class: cmd_question
  Output: 'Create a character vector that contains the following words: "My", "name", "is". Remember to enclose each word in its own set of double quotes, so that R knows they are character strings. Store the vector in a variable called my_char.'
  CorrectAnswer: my_char <- c("My", "name", "is")
  AnswerTests: omnitest(correctExpr='my_char <- c("My", "name", "is")')
  Hint: 'Type my_char <- c("My", "name", "is") to create a new variable called my_char
    that contains a character vector of length 3. Make sure that the commas separating
    the words are OUTSIDE of the double quotes, or else R thinks the commas are part
    of the words.'
    
- Class: text
  Output: 'BEST PRACTICE: Is to use double quotes. Single quotes (a.k.a. the apostrophe) will usually work but there are cases where using them will cause trouble. Double quotes are best for text.'

- Class: cmd_question
  Output: Print the contents of my_char to see what it looks like.
  CorrectAnswer: my_char
  AnswerTests: omnitest(correctExpr='my_char')
  Hint: Type my_char to view its contents.

- Class: text
  Output: It seems that we're missing something.... Ah, yes! Your name!

- Class: cmd_question
  Output: To add (or ''concatenate'') your name to the end of my_char, use the c() function like this c(my_char, your_name_here). Place your name in double quotes where Ive put your_name_here. Try it now, storing the result in a new variable called my_name.
  CorrectAnswer: my_name <- c(my_char, "Swirl")
  AnswerTests: var_is_a("character", "my_name"); expr_uses_func("c"); expr_creates_var("my_name"); val_has_length(4)
  Hint: Tack your name on to the end of the my_char vector using the c() function.  Be sure to assign the result to a new variable called my_name. If your name was "Swirl", you would type my_name <- c(my_char, "Swirl").

- Class: cmd_question
  Output: Take a look at the contents of my_name.
  CorrectAnswer: my_name
  AnswerTests: omnitest(correctExpr='my_name')
  Hint: Type my_name and press Enter to view its contents.

- Class: text
  Output: Ok, now that we understand vectors. Lets move on to playing with some real ecological data.
  
- Class: text
  Output: Whenever you're working with a new dataset, the first thing you should do is look at it! What is the format of the data? What are the dimensions? What are the variable names? How are the variables stored? Are there missing data? Are there any flaws in the data?

- Class: text
  Output: This lesson will teach you how to answer these questions and more using R's built-in functions. We'll be using a dataset constructed from the North Temperate Lakes LTER (https://lter.limnology.wisc.edu/node/54908).

- Class: text
  Output: It's very common for data to be stored in a data frame. It is the default class for data read into R using functions like read.csv() and read.table(), which you'll learn about in another lesson.

- Class: cmd_question
  Output: Since the dataset is stored in a data frame, we know it is rectangular. In other words, it has two dimensions (rows and columns) and fits neatly into a table or spreadsheet. Use dim(fish) to see exactly how many rows and columns we're dealing with.
  CorrectAnswer: dim(fish)
  AnswerTests: omnitest(correctExpr='dim(fish)')
  Hint: Use dim(fish) to see the exact dimensions of the fish dataset.

- Class: cmd_question
  Output: Now that we have a sense of the shape and size of the dataset, let's get a feel for what's inside. names(fish) will return a character vector of column (i.e. variable) names. Give it a shot.
  CorrectAnswer: names(fish)
  AnswerTests: omnitest(correctExpr='names(fish)')
  Hint: names(fish) will return a character vector of column (i.e. variable) names.
  
- Class: text
  Output: We've applied fairly descriptive variable names to this dataset, but that won't always be the case. A logical next step is to peek at the actual data. However, our dataset contains over 1200 observations (rows), so it's impractical to view the whole thing all at once.
  
- Class: cmd_question
  Output: The head() function allows you to preview the top of the dataset. Give it a try with only one argument.
  CorrectAnswer: head(fish)
  AnswerTests: omnitest(correctExpr='head(fish)')
  Hint: head(fish) will show you the very top of the dataset.

- Class: text
  Output: Take a minute to look through and understand the output above. Each row is labeled with the observation number and each column with the variable name. Your screen may not be wide enough to view all the columns side-by-side, in which case R displays as many columns as it can on each line before continuing on the next.

- Class: cmd_question
  Output: By default, head() shows you the first six rows of the data. You can alter this behavior by passing as a second argument the number of rows you'd like to view. Use head() to preview the first 10 rows of fish.
  CorrectAnswer: head(fish, 10)
  AnswerTests: omnitest(correctExpr='head(fish, 10)')
  Hint: head(fish, 10) will show you the first 10 rows of the dataset.

- Class: cmd_question
  Output: The same applies for using tail() to preview the end of the dataset. Use tail() to view the last 15 rows.
  CorrectAnswer: tail(fish, 15)
  AnswerTests: omnitest(correctExpr='tail(fish, 15)')
  Hint: tail(fish, 15) will show you the last 15 rows of the dataset.

- Class: cmd_question
  Output: After previewing the top and bottom of the data, you probably noticed lots of NAs, which are R's placeholders for missing values. Use summary(fish) to get a better feel for how each variable is distributed and how much of the dataset is missing.
  CorrectAnswer: summary(fish)
  AnswerTests: omnitest(correctExpr='summary(fish)')
  Hint: Try summary(fish) to look at how each variable is distributed and how many missing values we are dealing with.

- Class: text
  Output: summary() provides different output for each variable, depending on its class. For numeric data such as weight, summary() displays the minimum, 1st quartile, median, mean, 3rd quartile, and maximum. These values help us understand how the data are distributed.

- Class: text
  Output: For categorical variables (called 'factor' variables in R), summary() displays the number of times each value (or 'level') occurs in the data. For example, the summary for species tells us that our dataset contains 3 LMB (largemouth bass), 531 SMB (smallmouth bass), etc.

- Class: cmd_question
  Output: You can see that R truncated the summary for gutlabel by including a catch-all category called 'Other'. Since it is a categorical/factor variable, we can see how many times each value actually occurs in the data with table(fish$gutlabel).
  CorrectAnswer: table(fish$gutlabel)
  AnswerTests: omnitest(correctExpr='table(fish$gutlabel)')
  Hint: table(fish$gutlabel) will display counts for each level of the factor variable.

- Class: text
  Output: Each of the functions we've introduced so far has its place in helping you to better understand the structure of your data. However, we've left the best for last....

- Class: cmd_question
  Output: Perhaps the most useful and concise function for understanding the *str*ucture of your data is str(). Give it a try now.
  CorrectAnswer: str(fish)
  AnswerTests: omnitest(correctExpr='str(fish)')
  Hint: Use str(fish) to look at the structure of your data.

- Class: text
  Output: The beauty of str() is that it combines many of the features of the other functions you've already seen, all in a concise and readable format. At the very top, it tells us that the class of fish is 'data.frame' and that it has 1232 observations and 10 variables. It then gives us the name and class of each variable, as well as a preview of its contents.

- Class: text
  Output: str() is actually a very general function that you can use on most objects in R. Any time you want to understand the structure of something (a dataset, function, etc.), str() is a good place to start.
  
- Class: text
  Output: Ok, so what if we wanted to start working with the data? (This is where the advantages of R, over programs like excel, really start to become apparant.) For instance, the variable "weight" is the weight in grams of each individual predatory fish. We want to build a new variable that is the weight of fish in kg. Therefore, we need to multiply each value in the vector "weight" by 0.001.
  
- Class: cmd_question
  Output: The first step is we need to tell R to contrust a new variable. One way of accessing specific variables in a data.frame is by using the "$" operator. For instance, if we wanted to access the "weight" variable we could type, fish$weight. Go head and do it. 
  CorrectAnswer: fish$weight
  AnswerTests: omnitest(correctExpr='fish$weight')
  Hint: type fish$weight then press enter
  
- Class: text
  Output: What did you get? Well R displayed the variable "weight" in the dataframe fish. By default R truncates the display to the first thousand entries (otherwise your computer would crash if you accidentally tried to display a large data.frame)
  
- Class: cmd_question
  Output: So how would we create a new variable ("weight_kg")? Well all we need to type is fish$weight_kg <- fish$weight * 0.001. What this command is doing is telling R to create a new variable in the data.frame fish that multiples each entry in the weight vector by 0.001. Go head and do it. 
  CorrectAnswer: fish$weight_kg <- fish$weight * 0.001
  AnswerTests: omnitest(correctExp = 'fish$weight_kg <- fish$weight * 0.001')
  Hint: fish$weight_kg <- fish$weight * 0.001
  
- Class: cmd_question
  Output: So what happened? It might seem like nothing. But type head(fish)
  CorrectAnswer: head(fish)
  AnswerTests: omnitest(correctExpr='head(fish)')
  Hint: hmmm... type head(fish)
  
- Class: text
  Output: You can see that R has constructed a new variable "weight_kg" and added it to the data.frame. Nice job!
     
- Class: text
  Output: "Congratulation on completing another lesson! Now you know how to create numeric and character vectors, examine their structure, and combine them together in different ways. Nice work!"

- Class: mult_question
  Output: Please submit the log of this lesson to Google Forms so
    that Bart may evaluate your progress.
  AnswerChoices: Oh, yes please!
  CorrectAnswer: Oh, yes please!
  AnswerTests: submit_log()
  Hint: there you go
